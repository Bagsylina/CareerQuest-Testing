
# You can use this file to easily send requests to your API.
# Prerequisite: humao.rest-client Vscode plugin (already present on codespace)
# High-level overview of REST API concepts used here: https://www.packtpub.com/en-us/learning/how-to-tutorials/what-are-rest-verbs-and-status-codes-tutorial?srsltid=AfmBOoppDqtkhRxj5BLZONRZFzRDmh6eP-xyTo6H4OuEHYuVbrg1d4Dm

###################### JOBS
GET http://localhost:8080/job

######
GET http://localhost:8080/hello

####

POST http://localhost:8080/job
Content-Type: application/json

{
    "title": "Software developer",
    "description": "8 hr workdays, a year at least",
    "employer": "Adobe",
    "salary": 5000,
    "location": "San Francisco",
    "abilities": ["Java", "C"],
    "domains": ["SWE"],
    "characteristics": ["paid leave", "benefits"]
}

#### Example job 2
POST http://localhost:8080/job
Content-Type: application/json

{
    "title": "Frontend developer",
    "description": "half a year contract",
    "employer": "Orange",
    "salary": 5000,
    "location": "Bucharest",
    "abilities": ["Typescript", "React"],
    "domains": ["Frontend"],
    "characteristics": ["paid leave"]
}

#### Example job 3
POST http://localhost:8080/job
Content-Type: application/json

{
    "title": "QA Engineer",
    "description": "part-time contract",
    "employer": "Amazon",
    "salary": 10000,
    "location": "London",
    "abilities": ["DevOps", "Agile"],
    "domains": ["Testing", "Development", "Delivery", "DevOps"],
    "characteristics": ["hybrid"]
}

### Update job

PUT http://localhost:8080/job/1
Content-Type: application/json

{
    "title": "Senior Software developer",
    "description": "8 hr workdays, a year at least",
    "employer": "Adobe",
    "salary": 5000,
    "location": "San Francisco",
    "abilities": ["Java", "C"],
    "domains": ["SWE", ""],
    "characteristics": ["paid leave", "benefits"]
}

####Delete
DELETE http://localhost:8080/job/4


# Requests for API endpoints of the sample project:

### Hello world endpoint: get response "Hello, Stranger!"
GET http://localhost:8080/hello-world

### Hello world with a request param passed.
# When sending the request it will ask you for the name
# hitting enter will avoid passing the param, and do the default behaviour above
# @prompt name The name to display in response
GET http://localhost:8080/hello-world
    ?name={{name}}

### Save a greeting to database
@postGreetingId = 1001
@postGreetingContent = Hello!
POST http://localhost:8080/greetings
Content-Type: application/json

{
    "id": "{{postGreetingId}}",
    "content": "{{postGreetingContent}}"
}

### Get all greetings
GET http://localhost:8080/greetings

### Get info for greeting with given content
# @prompt content Greeting content to look for, defaults to "Overview"
GET http://localhost:8080/info
    ?title={{content}}

### Update an existing greeting
@putGreetingId = 1001
@putGreetingContent = Hello again!
PUT http://localhost:8080/greetings/{{putGreetingId}}
Content-Type: application/json

{
    "content": "{{putGreetingContent}}"
}

### Delete greeting
@deleteGreetingId = 1001
DELETE http://localhost:8080/greetings/{{deleteGreetingId}}


# TODO add requests for your own endpoints!

### Apply to job
POST http://localhost:8080/job-app/1?cvId=1

### Get all job applications for a job
GET http://localhost:8080/job-app/1

### Get all job applications for a user
GET http://localhost:8080/user-app/bagsylina

### Get job application
GET http://localhost:8080/app/1

### Delete job application
DELETE http://localhost:8080/app/1



### Get all applications to a job
GET http://localhost:8080/app/job/1

### Get all applications of a user
GET http://localhost:8080/app/user/1



### CHECK MATCH
GET http://localhost:8080/app/match/1?cvId=1
